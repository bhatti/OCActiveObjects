                                                                <h1>OCActiveObjects</h1> 
<h2>Vision:</h2>
  Create a simple O/R mapping library for Sqlite in iPhone SDK.

<h2>Mission Statement:</h2>
  Provide an Active Object pattern based O/R mapping library for iPhone development. Apply convention over configuration to simplify installation and development.

<h2>Installation:</h2>
  Git it from http://github.com/bhatti/OCActiveObjects/tree/master and add to your XCode

<h2>Design:</h2>
  This library is fairly small and consists of following classes:
<h3>ActiveObject</h3>
  This is base class that you extend in order to add automatic
  O/R support. You have to override following Class methods to specify name of
  the database and table:
  <p>
  <pre>
    + (NSString *) getTableName;

    + (NSString *) getDatabaseName;
  </pre>
  You will then be able to call following methods to interact with the Sqlite
  database:
  <pre>
  + (void) openDatabase;
  </pre>
  Above method must be called once before any other methods, usually at the
  start of your application.
  <p>
  <pre>
  + (void) closeDatabase;
  </pre>
  Above method must be called once before you shutodnw your application.
  <p>

<pre>  
  - (void) save;
</pre> 
Above method saves a new object or updates an existing object. Each subclass of
ActiveObject is automatically assigned a unique database id with a property
named "objectId". If that property is nil then it assumes this is new object and
inserts a new row in the database, otherwise it updates an existing row in the
database. It assumes that name of database fields are same as property names, 
though you can override that behavior by overriding _getPropertyNamesAndTypes 
Class method.
<p>
<pre>
  + (ActiveObject *) findByPrimaryKey:(NSNumber *)objId;
</pre>
Above method queries an object in the database matching objectId property, which
identifies each object in the database.
<p>

<pre>
  + (NSArray *) findWithCriteria:(NSDictionary *)criteria;
</pre>
Above method returns an array of objects that match criteria. The criteria at
this time is simple dictionary, i.e., pair of name and values that are joined by
"AND" clause. There is a immediate need to extend this to support more flexible
queries.
<p>
<pre>
  + (NSArray *) findAll;
</pre>
Above method returns all objects, which may not be good for iPhone application
due to limited amount of memory. This is another area that needs immediate
attention.
<p>

<pre>
  + (int) removeAll;
</pre>
Above method removes all rows in the table so be careful with this.
<p>

<pre>
  + (int) removeWithCriteria:(NSDictionary *)criteria;
</pre>
Above method removes only methods matching criteria. Again criteria consists of
name/value pairs.
<p>

<pre>
  + (int) countWithCriteria:(NSDictionary *)criteria;
</pre>
Above method counts the number of rows in the database matching criteria.
<p>

<pre>
  + (int) countAll;
</pre>
Above method returns count of all rows in the table.
<h3>Exension Methods in ActiveObject</h3>
There are number of extension methods to customize SQLs or behavior of the
object such as 
<pre>


- (void) _insert;

- (void) _update;

+ (NSDictionary *) _getPropertyNamesAndTypes;

+ (NSArray *) _getPropertyNames;

+ (NSArray *) _getPropertyNamesWithoutObjectId;

+ (NSMutableString *) _getFieldNamesAsStringWithObjectId:(BOOL) useObjectId;

+ (NSString *) _getCreateSQL;

+ (NSMutableString *) _getInsertSQL;

+ (NSMutableString *) _getUpdateSQL;

+ (NSMutableString *) _getSelectSQL;

+ (void) _createTable;

+ (NSString *) _toWhere:(NSArray *)names;
</pre>
  
<h3>IntrospectHelper</h3>
The OCActiveObjects library uses some Objective C magical runtime support to
query for properties and this class encapsulates those methods.
<h3>SqliteHelper</h3>
This class some helper methods for Sqlite3.

<h2>How to use</h2>

In order to test it, let's define a simple Person class that extends
ActiveObject, e.g.
<pre>
#import &lt;Foundation/Foundation.h&gt;
#import "ActiveObject.h"

@interface Person : ActiveObject {
        NSString *name;
        short age;
        int rank;
        long votes;
        char sex;
        double income;
        BOOL active;
        NSInteger flags;
        NSNumber *rating;
        NSDate *birthdate;      
}


@property (nonatomic, retain) NSString *name;
@property (nonatomic, assign) short age;
@property (nonatomic, assign) int rank;
@property (nonatomic, assign) long votes;
@property (nonatomic, assign) char sex;
@property (nonatomic, assign) double income;
@property (nonatomic, assign) BOOL active;
@property (nonatomic, assign) NSInteger flags;
@property (nonatomic, retain) NSNumber *rating;
@property (nonatomic, retain) NSDate *birthdate;


- (BOOL)isEqualToPerson:(Person *)aPerson;

@end
</pre>

Implemention of Person.m looks like:
<pre>
#import "Person.h"


@implementation Person
@synthesize name;
@synthesize age;
@synthesize rank;
@synthesize votes;
@synthesize sex;
@synthesize income;
@synthesize active;
@synthesize flags;
@synthesize rating;
@synthesize birthdate;


- (BOOL)isEqual:(id)other {
    if (other == self)
        return YES;
    if (!other || ![other isKindOfClass:[self class]])
        return NO;
    return [self isEqualToPerson:other];
}

- (BOOL)isEqualToPerson:(Person *)aPerson {
        if (self == aPerson)
        return YES;
    if (![(id)[self name] isEqual:[aPerson name]])
        return NO;
    return YES;
}

- (NSUInteger)hash {
        NSUInteger hash = 0;
        hash += [[self name] hash];
        return hash;
}



- (NSString *)description {
        return [NSString stringWithFormat:@"id %@, name %@, age %d, rank %d, votes %d, sex %c, income %f, active %d, flags %d, rating %@, birthdate %@", 
                        self.objectId, self.name, self.age, self.rank, self.votes, self.sex, self.income, self.active, self.flags, self.rating, self.birthdate];
}


- (void) dealloc {
        [name release];
        [birthdate release];
        [super dealloc];
}


+ (NSString *) getTableName {
        return @"persons";
}

+ (NSString *) getDatabaseName {
        return @"personsdb";
}

@end
</pre>


Then you can first open the database, e.g.
<pre> 
        [Person openDatabase];
</pre> 

Then create a new person object, e.g.
<pre>
        Person *person = [[[Person alloc] init] autorelease];
        person.birthdate = [[NSDate alloc]init];
        int random = [person.birthdate timeIntervalSince1970];
        person.age =  random % 30;
        person.rank = random % 20;
        person.votes = random % 10;
        person.sex = 'M';
        person.name = [NSString stringWithFormat:@"Joe #%d", random % 1000];
        person.income = random % 3000;
        person.active = YES;
        person.flags = random % 30 + 0.5;
        person.rating = [NSNumber numberWithInt:20.5];  
        return person;
</pre>

You will then be able to save the person object as
<pre>
        [person save];
</pre>
You can see how many rows are in the database by
<pre>
        int count = [Person countAll];
</pre>

And then retrieve the object that we saved as
<pre>
        Person *person2 = (Person *) [Person findByPrimaryKey:person.objectId];
</pre>
<p>
When you are done, you can then close the database:
<pre>
        [Person closeDatabase];
</pre>




<h2>Backlog:</h2>
<ul>
  <li>add better criteria support
  <li>add paging support
  <li>add XCode framework support to integrate easily with other applications
  <li>add more tests
  <li>add relational mapping
  <li>add validation support
</ul>

